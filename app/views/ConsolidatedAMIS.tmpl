{{define "ConsolidatedAMIS"}}

{{template "Header"}}
{{if .HasPermission "Menu"}}
  {{ template "Menu" }}
{{else}}
  {{ template "Menu_lv1"}}
{{ end }}
{{template "Nav_validation"}}
<br />
<br />
<center>
  <h2 style="color: gold;">Indicadores de AMIS</h2>
</center>
<div class="card">
  <div class="card-body">
    <form action="#">
      <div class="form-row align-items-center">
        <div class="col-md-2 col-md-offset-3">
          <label for="">Area</label>
          <select name="area" id="area" class="form-control"></select>
        </div>
        <div class="col-md-2 col-md-offset-3">
          <label> Fecha inicio </label>
          <input
            type="date"
            id="idate"
            name="idate"
            class="form-control"
            required
          />
        </div>
        <div class="col-md-4 col-md-offset-3">
          <label> Fecha final </label>
          <input
            type="date"
            id="fdate"
            name="fdate"
            class="form-control"
            required
          />
        </div>
        <div class="col-md-2 col-md-offset-3">
          <input
            type="button"
            class="btn btn-primary btn-block"
            value="Filtrar"
            onclick="getAMIS()"
          />
        </div>
      </div>
    </form>
  </div>
</div>
<br /><br /><br />

<br /><br /><br />
<center><h2 style="color: gold;">AMIS x Rango</h2></center>
<a id="dlink" style="display: none;"></a>

<input
  id="exportButton"
  class="btn btn-block btn-success"
  type="button"
  onclick="tableToExcel('data_table', 'name', 'reporteTemperaturas.xls')"
  value="Exportar a Excel"
  hidden="true"
/>
<br />



    <table
    class="table table-responsive table-dark table-striped"
    style="font-size: small"
    id="data_table"
    >
  <thead>
    <tr>
      
      <th>Line</th>
      <th>Volume Produced - Good Product</th>
      <th>Total Time</th>
      <th>Legal Lossses</th>
      <th>UnutilisedCapacityLosses</th>
      <th>Available Loading Time</th>
      <th>IdleTime</th>
      <th>Loading Time</th>
      <th>Process Driven Losses</th>
      <th>Operating Time</th>
      <th>Manufactoring Performance Losses</th>
      <th>Value Operating Time</th>
      <th>Overall Equipment Efficiency</th>
      <th>Manufacturing Performance</th>
      <th>Shared Performance</th>
      <th>Asset Utilisation</th>
      <th>Unconstrained Capacity Utilisation</th>
      <th>Constrained Capacity Utilisation</th>
      <th>Breakdowns</th>
      <th>GeneralChangeovers</th>
      <th>ProductChangeovers</th>
      <th>FormatChangeovers</th>
      <th>GeneralChangeoversTime</th>
      <th>ProductChangeoversTime</th>
      <th>FormatChangeoversTime</th>
      <th>OR</th>
   
    </tr>
  </thead>

    <tbody id="data_p"></tbody>
  
  </table>
 

<br />

<center>
  <p id="noResult" style="color: white; font-size: 36px;" hidden>
    No hay resultados!
  </p>
  <img
    id="desert"
    src="/public/images/desertIconWhite.png"
    alt="noResultados"
    hidden
  />
</center>


<br /><br />
<div class="container">
  <div class="table-responsive-xl">
    <table class="table table-dark table-bordered text-light">
      <tbody id="data_ptree"></tbody>
    </table>
  </div>
</div>
<br />
<center><h2 style="color: gold;">Total Area</h2></center>
<hr style="background-color: gold;"/>

<div class="container">
  <div class="row">
    <div class="col-sm">
      <canvas id="myChart" width="400" height="400"></canvas>
    </div>
    <div class="col-sm">
      <canvas id="ctxPie" width="400" height="400"></canvas>
    </div>
  </div>
</div>


<!-- Modal -->
<div
  class="modal fade"
  id="specific"
  tabindex="-1"
  role="dialog"
  aria-labelledby="closeFormLabel"
  aria-hidden="true"
>
  <div class="modal-dialog" role="document">
    <div class="modal-content">

      <div class="modal-header">
        <h5 class="modal-title" id="subHeaderTitle"></h5>
        <button
          type="button"
          class="close"
          data-dismiss="modal"
          aria-label="Close"
        >
          <span aria-hidden="true">&times;</span>
        </button>
      </div>

        <div class="modal-body">
          <div class="container" style="background-image: linear-gradient(to left,hsla(211, 99%, 34%, 1),hsla(238, 80%, 37%, 1));">
             <div class="row">
                <canvas id="myChart2" width="300" height="300"></canvas>
              </div>
              <div class="row">
                <canvas id="ctxPie2" width="300" height="300"></canvas>
              </div>
            
          </div>

        </div>
        <div class="modal-footer">
            <h4 style="color: gold;" id="lineFooterTitle"></h4>
          
   
        </div>

      <img
        class="card-img-bottom"
        src="/public/images/visual_ul02.jpg"
        height="184"
        width="100%"
      />
    </div>
  </div>
</div>





<script src="/public/scripts/jquery-3.3.1.min.js"></script>
<script src="/public/scripts/Chart.bundle.min.js"></script>
<script>


  $("a").click(function(){
      $("table").each(function() {
          var $this = $(this);
          var newrows = [];
          $this.find("tr").each(function(){
              var i = 0;
              $(this).find("td").each(function(){
                  i++;
                  if(newrows[i] === undefined) { newrows[i] = $("<tr></tr>"); }
                  newrows[i].append($(this));
              });
          });
          $this.find("tr").remove();
          $.each(newrows, function(){
              $this.append(this);
          });
      });
      
      return false;
  });





  $(document).ready(function () {
    $.getJSON("/getArea", function (data) {
      $("#area").empty();
      $.each(data, function (index, row) {
        $("#area").append(
          "<option value='" + row.Id + "' >" + row.Name + "</option>"
        );
      });
    });
  });

  function getAMIS() {

    let area = $("#area").val();
    let idate = $("#idate").val();
    let fdate = $("#fdate").val(); 



    $.getJSON("/getAMISV00?idate="+idate+"&fdate="+fdate+"&area="+area, function (data) {
      
      $("#data_p").empty();
      $.each(data, function (index, row) {
        $("#data_p").append("<tr>");

        $("#data_p").append(

          "<td>" +row.Line +"</td>" +
          "<td>" +row.GoodVolume +"</td>" +
          "<td>" +row.TotalTime +"</td>" +
          "<td>" +row.LegalLosses +"</td>" +
          "<td>" +row.UCL +"</td>" +
          "<td>" +row.ALT +"</td>" +
          "<td>" +row.IdleTime +"</td>" +
          "<td>" +row.LT +"</td>" +
          "<td>" + (row.PDL / 60 ) +"</td>" +
          "<td>" +row.OT +"</td>" +
          "<td>" + (row.MPL / 60 ) +"</td>" +
   
          "<td>" +row.VOT +"</td>" +
          "<td>" +row.OEE +"</td>" +
          "<td>" +row.MP +"</td>" +
          "<td>" +row.SP +"</td>" +
          "<td>" +row.AU +"</td>" +
          "<td>" +row.UCU +"</td>" +
          "<td>" +row.CCU +"</td>" +

          "<td>" +row.Breakdowns +"</td>" +
          "<td>" +row.ProductChangeovers +"</td>" +
          "<td>" +row.FormatChangeovers +"</td>" +
          "<td>" +row.GeneralChangeovers +"</td>" +

          "<td>" +row.ProductChangeoversTime +"</td>" +
          "<td>" +row.FormatChangeoversTime +"</td>" +
          "<td>" +row.GeneralChangeoversTime +"</td>" +

          "<td>" +row.OR +"</td>" 
        );
          

        $("#data_p").append("</tr>");

      });
    });


    hiddeE("exportButton", false);

    getLossTree();
  }

  var tableToExcel = (function () {
    var uri = "data:application/vnd.ms-excel;base64,",
      template =
        '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>',
      base64 = function (s) {
        return window.btoa(unescape(encodeURIComponent(s)));
      },
      format = function (s, c) {
        return s.replace(/{(\w+)}/g, function (m, p) {
          return c[p];
        });
      };
    return function (table, name, filename) {
      if (!table.nodeType) table = document.getElementById(table);
      var ctx = { worksheet: name || "Worksheet", table: table.innerHTML };

      document.getElementById("dlink").href =
        uri + base64(format(template, ctx));
      document.getElementById("dlink").download = filename;
      document.getElementById("dlink").click();
    };
  })();








  Chart.defaults.global.defaultFontColor = "white";

  var ctx = document.getElementById("myChart").getContext("2d");
  var myChart = new Chart(ctx, {
    type: "bar",
    data: {
      labels: [],
      datasets: [
        {
          label: "Paros",
          data: [],
          backgroundColor: [],
          borderColor: ["rgba(0, 0, 255, 1)"],
          borderWidth: 1,
        },
      ],
    },
    options: {
      scales: {
        yAxes: [
          {
            ticks: {
              beginAtZero: true,
            },
          },
        ],
      },
      animation: {
        duration: 3000,
      },
      responsive: false,
      maintainAspectRatio: false,
    },
  });

  var ctxPie = document.getElementById("ctxPie").getContext("2d");
  var myPieChart = new Chart(ctxPie, {
    type: "pie",
    data: {
      labels: [],
      datasets: [
        {
          label: "Paros",
          data: [],
          backgroundColor: [],
          borderColor: ["rgba(0, 0, 255, 1)"],
          borderWidth: 1,
        },
      ],
    },
    options: {
      scales: {
        yAxes: [
          {
            ticks: {
              beginAtZero: true,
            },
          },
        ],
      },
      animation: {
        duration: 3000,
      },
      responsive: false,
      maintainAspectRatio: false,    
    },
  });


  var ctx2 = document.getElementById("myChart2").getContext("2d");
  var myChart2 = new Chart(ctx2, {
    type: "bar",
    data: {
      labels: [],
      datasets: [
        {
          label: "Paros",
          data: [],
          backgroundColor: [],
          borderColor: ["rgba(0, 0, 255, 1)"],
          borderWidth: 1,
        },
      ],
    },
    options: {
      scales: {
        yAxes: [
          {
            ticks: {
              beginAtZero: true,
            },
          },
        ],
      },
      animation: {
        duration: 3000,
      },
      responsive: false,
      maintainAspectRatio: false,
    },
  });

  var ctxPie2 = document.getElementById("ctxPie2").getContext("2d");
  var myPieChart2 = new Chart(ctxPie2, {
    type: "pie",
    data: {
      labels: [],
      datasets: [
        {
          label: "Paros",
          data: [],
          backgroundColor: [],
          borderColor: ["rgba(0, 0, 255, 1)"],
          borderWidth: 1,
        },
      ],
    },
    options: {
      scales: {
        yAxes: [
          {
            ticks: {
              beginAtZero: true,
            },
          },
        ],
      },
      animation: {
        duration: 3000,
      },
      responsive: false,
      maintainAspectRatio: false,    
    },
  });


  function addData(chart, label, data, color) {
    chart.data.labels.push(label);
    chart.data.datasets.forEach((dataset) => {
      dataset.data.push(data);
      dataset.backgroundColor.push(color);
    });
    chart.update();
  }

  function removeData(chart) {
    chart.data.labels.pop();
    chart.data.datasets.forEach((dataset) => {
      dataset.data.pop();
      dataset.backgroundColor.pop();
    });
    chart.update();
  }


  function getByLineLossTreeByFancy(line){


  document.getElementById("lineFooterTitle").innerHTML = "General";


$.getJSON("/getLineE?line="+line,
function (data) {
  document.getElementById("subHeaderTitle").innerHTML = data.Name;
});

for (let i = 0; i < 20; i++) {
    removeData(myChart2);
    removeData(myPieChart2);
}

$.getJSON("/getByLineLossTreeDataGridBy?"+
"line="+line+
"&startDate=" +$("#idate").val() +
 "&endDate=" + $("#fdate").val(), 
  function (data) {

  let sumLosses = 0;

    for (let i = 0; i < data.length; i++) {
      const element = data[i];
      sumLosses += element.TotalMinutes;
    }


    for (let j = 0; j < data.length; j++) {
      const element = data[j];
      addData(
        myPieChart2,
        element.SubCategoryName,
        (element.TotalMinutes / sumLosses) * 100,
        element.Color
      );

      addData(
        myChart2,
        element.SubCategoryName,
        element.TotalMinutes,
        element.Color
      );
    }

  });

}



  function getLossTreeByFancy(line, sub){

    $.getJSON("/getSubE?id="+sub,
      function (data) {
        //console.log(data);
        document.getElementById("lineFooterTitle").innerHTML = data[0].Description;
      });

    $.getJSON("/getLineE?line="+line,
    function (data) {
      document.getElementById("subHeaderTitle").innerHTML = data.Name;
    });

    for (let i = 0; i < 20; i++) {
        removeData(myChart2);
        removeData(myPieChart2);
    }

    $.getJSON("/getLossTreeDataGridBy?"+
    "line="+line+
    "&sub="+sub+
    "&startDate=" +$("#idate").val() +
     "&endDate=" + $("#fdate").val(), 
      function (data) {

     

      let sumLosses = 0;

        for (let i = 0; i < data.length; i++) {
          const element = data[i];
          sumLosses += element.TotalMinutes;
        }


        for (let j = 0; j < data.length; j++) {
          const element = data[j];
          addData(
            myPieChart2,
            element.SubCategoryName,
            (element.TotalMinutes / sumLosses) * 100,
            element.Color
          );

          addData(
            myChart2,
            element.SubCategoryName,
            element.TotalMinutes,
            element.Color
          );
        }

      });

  }


  function getLossTreeBy(){
    for (let i = 0; i < 20; i++) {
        removeData(myChart2);
        removeData(myPieChart2);
    }

    $.getJSON("/getLossTreeDataGridBy?"+
    "line="+$("#line").val()+
    "&sub="+$("#sub").val()+
    "&startDate=" +$("#idate").val() +
     "&endDate=" + $("#fdate").val(), 
      function (data) {
      let sumLosses = 0;

        for (let i = 0; i < data.length; i++) {
          const element = data[i];
          sumLosses += element.TotalMinutes;
        }


        for (let j = 0; j < data.length; j++) {
          const element = data[j];
          addData(
            myPieChart2,
            element.SubCategoryName,
            (element.TotalMinutes / sumLosses) * 100,
            element.Color
          );

          addData(
            myChart2,
            element.SubCategoryName,
            element.TotalMinutes,
            element.Color
          );
        }



      });


  }

  function getLossTree() {
    console.log("DataSetLength: " + myChart.data.datasets[0].data.length);
    for (let i = 0; i < 20; i++) {
      removeData(myChart);
      removeData(myPieChart);
    }

    $.getJSON("/getLossTreeDataGrid?area="+$("#area").val() +
        "&startDate=" +$("#idate").val() +
        "&endDate=" + $("#fdate").val(), function (data) {


      $("#data_ptree").empty();
      $("#data_ptree").append("<tr>");
      $("#data_ptree").append("<td style='background-color:black; color:gold;'>" +"Clasificacion "+ "</td>");
      $("#data_ptree").append("<td style='background-color:black; color:gold;'>" +"Categoria | Lineas"+ "</td>");
      for (let i = 0; i < data[0].T.length; i++) {
        const e = data[0].T[i];
        
        $("#data_ptree").append("<td style='background-color:black; color:gold;' data-toggle='modal' data-target='#specific' onclick='getByLineLossTreeByFancy("+e.LineId+")'>" +e.Line+ "</td>");

      }

      $("#data_ptree").append("</tr>");
      


      $.each(data, function (index, row) {
        $("#data_ptree").append("<tr>");
 
        $("#sub").append("<option value='" + row.S.Id + "'>" + row.S.Description + "</option>");
        
        
        $("#data_ptree").append("<td style='background-color: font-size: small"+ row.S.Color +"'>"+row.S.LTC+ "</td>");
        $("#data_ptree").append("<td style='background-color:"+ row.S.Color +"'>"+row.S.Description+ "</td>");


        for (let i = 0; i < row.T.length; i++) {
          const e = row.T[i];
         
          $("#data_ptree").append("<td style='background-color:"+
           e.Color +"' data-toggle='modal' data-target='#specific' onclick='getLossTreeByFancy("+e.LineId+", "+row.S.Id +")'>" +e.TotalMinutes+ "</td>");   

      
        }  
       
        $("#data_ptree").append("</tr>");

      });
    });





    var request = new XMLHttpRequest();
    request.open(
      "GET",
      "/getLossTreeData?area=" +
        $("#area").val() +
        "&startDate=" +
        $("#idate").val() +
        "&endDate=" +
        $("#fdate").val(),
      true
    );

    request.onload = function () {
      if (request.status >= 200 && request.status < 400) {
        // Success!

        var data = JSON.parse(request.responseText);
        var sumLosses = 0;

        data.Losses.forEach((element) => {
          sumLosses += element.TotalMinutes;
          removeData(myPieChart);
          removeData(myChart);
        });

        data.Losses.forEach((element) => {
          var proportion = 0;

          addData(
            myPieChart,
            element.SubCategoryName,
            (element.TotalMinutes / sumLosses) * 100,
            element.Color
          );

          addData(
            myChart,
            element.SubCategoryName,
            element.TotalMinutes,
            element.Color
          );
        });
      } else {
        // We reached our target server, but it returned an error
      }
    };

    request.onerror = function () {
      // There was a connection error of some sort
    };
    request.send();
  }








</script>

{{template "Footer"}}
{{ end }}
