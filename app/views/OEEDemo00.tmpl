{{define "OEEDemo00"}}
  {{ template "Header" }}
    {{ template "Menu" }}
    {{ template "Nav_oee"}}

    <script src="/public/scripts/plotly-latest.min.js"></script>
    <script src="/public/scripts/d3.v5.min.js"></script>

      <center>
            <div id="event_per_line" style="width:800;height:800"></div>
           
            <button type="button" class="btn btn-primary" onclick="javascript:randomize();">Generate</button>
            <hr>
        </center>
        <script>
        z1 = []

        var r;
        var c;
        for (r = 0; r < 14; r++) { 
            z1[r] = []
            for(c=0; c<9; c++){
                z1[r][c] = Math.random()%15 
            }
        }
        var data = [{
        z: z1,
        type: 'surface',
        contours: {
            z: {
            show:true,
            usecolormap: true,
            //highlightcolor:"#42f462",
            highlightcolor:"#2a30cc",
            project:{z: true}
            }
        }
        }];
        
        var layout = {
        title: 'Event per Line',
        scene: {camera:{eye: {x: 1.87, y: 0.88, z: -0.64}}},
        autosize: false,
        width:650,
        height: 650,
        margin: {
            l: 65,
            r: 50,
            b: 65,
            t: 90,
        },
        yaxis: {
                title: "y Axis"
        }
        
        };

        Plotly.newPlot('event_per_line', data, layout, {showSendToCloud: true});
        //);
        function randomize() {
        z1 = []

        var r;
        var c;
        for (r = 0; r < 14; r++) { 
            z1[r] = []
            for(c=0; c<9; c++){
                z1[r][c] = Math.random()%15 
            }
        }


        Plotly.animate('event_per_line', {
            data: [{z: z1}],
            traces: [0],
            layout: {}
        }, {
            transition: {
            duration: 500,
            easing: 'cubic-in-out'
            },
            frame: {
                duration: 500
            }
        })
        }
  </script>
<br>

<center>

<div class="container">
  <div style="max-width: 900px; max-height: 400px; padding: 10px">
    <div class="custom-control custom-checkbox">
        <input id="halt" type="checkbox" name="halt"  class="custom-control-input" value="halt" checked=""/>
        <label class="custom-control-label" for="halt">Stop</label>
    </div>
   <div id="viewDiv"></div>
 </div>
</div>

</center>
<script src="/public/scripts/d3.min.js"></script>
<script src="/public/scripts/realTimeChartMulti.js"></script>
<script>
'use strict';

// create the real time chart
var chart = realTimeChartMulti()
    .title("Losses")
    .yTitle("Events")
    .xTitle("Time")
    .yDomain(["Event1"]) // initial y domain (note array)
    .border(true)
    .width(900)
    .height(350);

// invoke the chart
var chartDiv = d3.select("#viewDiv").append("div")
    .attr("id", "chartDiv")
    .call(chart);

// alternative and equivalent invocation
//chart(chartDiv); 

// event handler for debug checkbox
d3.select("#debug").on("change", function() {
  var state = d3.select(this).property("checked")
  chart.debug(state);
})

// event handler for halt checkbox
d3.select("#halt").on("change", function() {
  var state = d3.select(this).property("checked")
  chart.halt(state);
})


// configure the data generator

// mean and deviation for generation of time intervals
var tX = 5; // time constant, multiple of one second
var meanMs = 1000 * tX, // milliseconds
    dev = 200 * tX; // std dev

// define time scale
var timeScale = d3.scale.linear()
    .domain([300 * tX, 1700 * tX])
    .range([300 * tX, 1700 * tX])
    .clamp(true);

// define function that returns normally distributed random numbers
var normal = d3.random.normal(meanMs, dev);

// define color scale
var color = d3.scale.category10();

// in a normal use case, real time data would arrive through the network or some other mechanism
var d = -1;
var shapes = ["rect", "circle"];
var timeout = 0;

// define data generator
function dataGenerator() {

  setTimeout(function() {

    // add categories dynamically
    d++;
    switch (d) {
      case 5:
        chart.yDomain(["Event1", "Event2"]);
        break;
      case 10:
        chart.yDomain(["Event1", "Event2", "Event3"]);
        break;
      default:
    }

    // output a sample for each category, each interval (five seconds)
    chart.yDomain().forEach(function(cat, i) {

      // create randomized timestamp for this category data item
      var now = new Date(new Date().getTime() + i * (Math.random() - 0.5) * 1000);

      // create new data item
      var obj;
      var doSimple = false;
      if (doSimple) {
        obj = {
          // simple data item (simple black circle of constant size)
          time: now,
          color: "black",
          opacity: 1,
          category: "Event" + (i + 1),
          type: "circle",
          size: 5,
        };

      } else {
        obj = {
          // complex data item; four attributes (type, color, opacity and size) are changing dynamically with each iteration (as an example)
          time: now,
          color: color(d % 10),
          opacity: Math.max(Math.random(), 0.3),
          category: "Event" + (i + 1),
          //type: shapes[Math.round(Math.random() * (shapes.length - 1))], // the module currently doesn't support dynamically changed svg types (need to add key function to data, or method to dynamically replace svg object â€“ tbd)
          type: "circle",
          size: Math.max(Math.round(Math.random() * 12), 4),
        };
      }

      // send the datum to the chart
      chart.datum(obj);      
    });

    // drive data into the chart at average interval of five seconds
    // here, set the timeout to roughly five seconds
    timeout = Math.round(timeScale(normal()));

    // do forever
    dataGenerator();

  }, timeout);
}

// start the data generator
dataGenerator();

</script>
<hr>

  {{ template "Footer" }}
{{ end }}